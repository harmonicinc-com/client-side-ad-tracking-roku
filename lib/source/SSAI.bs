import "pkg:/source/roku_modules/rokurequests/Requests.brs"
import "InitResponseParser.bs"
import "MetadataParser.bs"
import "DashParser.bs"
import "PodHelper.bs"
import "HlsParser.bs"
import "UrlResolver.bs"

class RAFX_SSAI
    __name__ = "harmonic"
    AdEvent = {
        PODS: "PodsFound",
        POD_START: "PodStart",
        START: "Start",
        IMPRESSION: "Impression",
        CREATIVE_VIEW: "creativeView",
        FIRST_QUARTILE: "FirstQuartile",
        MIDPOINT: "Midpoint",
        THIRD_QUARTILE: "ThirdQuartile",
        COMPLETE: "Complete",
        POD_END: "PodComplete",
        STREAM_END: "StreamEnd",
        ACCEPT_INVITATION: "AcceptInvitation",
        ERROR: "Error"
    }

    private msgType = {
        UNKNOWN: 0,
        POSITION: 1,
        METADATA: 2,
        FINISHED: 3,
        KEYEVENT: 4
    }

    private player
    private metadataUrl
    private useStitched
    private callbacks = {}
    private rafMetadata = {}
    private initResponseParser
    private metadataParser
    private dashParser
    private hlsParser
    private podHelper
    private logLevel = 0
    private roku_ads
    private lastPingTime = 0
    private lastDataStartTime = 0
    private lastDataEndTime = 0

    private PING_INTERVAL_SEC = 4
    private POD_RETENTION_SEC = 30
    private EARLY_FETCH_SEC = 5

    private adsInProgress = false

    sub new()
        m.initResponseParser = new InitResponseParser()
        m.metadataParser = new MetadataParser()
        m.dashParser = new DashParser()
        m.hlsParser = new HlsParser()
        m.podHelper = new PodHelper()
        m.roku_ads = Roku_Ads()
    end sub

    ' param: URL - Live URL w/ sessId query param
    ' param: options - object - Options for the request (optional)
    '   - initRequest - boolean - True if the session init API should be called first to initialize the session.
    ' return assocarray:
    ' - ssai: boolean - True if SSAI is detected, false otherwise
    ' - streamUrl: string | invalid - Personalized stream URL with session ID.
    '                                     Only valid if ssai is true
    function getStreamInfo(url as string, options as object) as object
        result = {
            ssai: false,
            streamUrl: invalid
        }

        if options = invalid
            options = {}
        end if
        initRequest = options["initRequest"]
        if initRequest = invalid
            ' Default to use initRequest
            initRequest = true
        end if

        if /^(?:https?:\/\/)?(?:[^@\/\n]+@)?(?:www\.)?([^:\/?\n]+)(?:\/pmm-[^\/]*)?\/variant/.isMatch(url)
            ' Extract hostname and base path in one go
            urlParts = /^(?:https?:\/\/)?(?:[^@\/?\n]+@)?(?:www\.)?([^:\/?\n]+)(\/.*?\/)[^\/]+$/g.match(url)
            hostname = urlParts[1]
            basePath = urlParts[2]

            ' Extract filename with query params and file extension
            fullFilename = /[^\/]+(\?[^\/]*)?$/g.match(url)[0]
            fileExt = /\.(\w{3,4})($|\?)/g.match(url)[1]

            ' Get the URLs from the init request if initRequest is true
            if initRequest
                initInfo = m.getInitRequestInfo(url)
                if initInfo.manifestUrl <> invalid and initInfo.trackingUrl <> invalid
                    m.log(`Response from init request successfully parsed. manifest: ${initInfo.manifestUrl}, metadata: ${initInfo.trackingUrl}`)

                    result.streamUrl = ResolveUrl(hostname, basePath, initInfo.manifestUrl)
                    m.metadataUrl = ResolveUrl(hostname, basePath, initInfo.trackingUrl)

                    if result.streamUrl <> invalid
                        manifest = rokurequests_Requests().get(result.streamUrl)
                        m.dashParser.setManifest(manifest.text)
                        if m.dashParser.isDash(manifest.headers["content-type"], fileExt)
                            m.metadataParser.availabilityStartTime.setLongInt(m.dashParser.getAvailabilityStartTime())
                        end if

                        m.rafMetadata = m.requestMetadata()
                        result.ssai = m.rafMetadata <> invalid
                    else
                        m.log("Failed to construct stream URL from initInfo.")
                    end if

                    return result
                else
                    m.log("init request failed, falling back to obtaining manifest directly")
                end if
            end if

            ' need to send a manifest request first, or session won't be created
            manifest = rokurequests_Requests().get(url)
            m.dashParser.setManifest(manifest.text)
            
            streamUrl = invalid
            if m.dashParser.isDash(manifest.headers["content-type"], fileExt)
                ' Handle DASH
                m.metadataParser.availabilityStartTime.setLongInt(m.dashParser.getAvailabilityStartTime())
                streamUrl = m.dashParser.getLocation()
            else if fileExt = "m3u8"
                ' Handle HLS
                m.hlsParser.setPlaylist(manifest.text)
                streamUrl = m.hlsParser.getFirstMediaPlaylistUrl()
            end if
    
            if streamUrl <> invalid
                finalUrl = ResolveUrl(hostname, basePath, streamUrl)
                
                ' Replace filename with metadata, ignore any extension
                m.metadataUrl = /\/[^\/\.?]+(?:\.[^\/\.?]+)?(\??[^\/]*$)/g.replaceAll(finalUrl, "/metadata\1")
                
                m.rafMetadata = m.requestMetadata()
                result.ssai = m.rafMetadata <> invalid
                result.streamUrl = result.ssai ? /\/[^\/\.?]+(?:\.[^\/\.?]+)?(\??[^\/]*$)/g.replaceAll(finalUrl, "/"+fullFilename+"\1") : invalid
            end if
        end if
        return result
    end function

    private function getInitRequestInfo(url as string) as object
        result = {
            manifestUrl: invalid,
            trackingUrl: invalid
        }

        ' First try GET request with initSession=true query param
        getUrl = url
        if url.instr("?") > -1
            getUrl = url + "&initSession=true"
        else
            getUrl = url + "?initSession=true"
        end if
        
        initResponse = rokurequests_Requests().get(getUrl)
        
        if initResponse <> invalid and initResponse.ok and initResponse.statusCode = 200
            ' Parse the urls from the response
            m.initResponseParser.setResponseJson(initResponse.json)

            ' Extract the manifest and tracking URLs
            manifestUrlPath = m.initResponseParser.getManifestUrl()
            trackingUrlPath = m.initResponseParser.getTrackingUrl()
            
            ' Check if both URLs were successfully parsed
            if manifestUrlPath <> invalid and trackingUrlPath <> invalid
                result.manifestUrl = manifestUrlPath
                result.trackingUrl = trackingUrlPath
                return result
            else
                m.log("GET init request succeeded but failed to parse URLs, falling back to POST request")
            end if
        else
            m.log("GET init request failed, falling back to POST request")
        end if

        ' Fallback to POST init request
        initResponse = rokurequests_Requests().post(url, {})

        if initResponse = invalid or not initResponse.ok or initResponse.statusCode <> 200
            m.log("POST init request failed with status code: " + initResponse.statusCode.tostr())
            ' Should fallback parsing manifest
        else
            ' Parse the urls from the response
            m.initResponseParser.setResponseJson(initResponse.json)

            ' Extract the manifest and tracking URLs
            manifestUrlPath = m.initResponseParser.getManifestUrl()
            if manifestUrlPath <> invalid
                result.manifestUrl = manifestUrlPath
            end if

            trackingUrlPath = m.initResponseParser.getTrackingUrl()
            if trackingUrlPath <> invalid
                result.trackingUrl = trackingUrlPath
            end if
        end if

        return result
    end function

    function requestMetadata()
        if m.metadataUrl <> invalid
            url = not m.timeInRange() ? `${m.metadataUrl}&start=${m.getMpdTime() * 1000}` : m.metadataUrl
            r = rokurequests_Requests().get(url)
            if r.ok and r.statusCode = 200 and r.headers?.["content-type"] = "application/json" and r.json <> invalid
                if r.json.dataRange <> invalid and r.json.dataRange.keys().count() > 0
                    m.lastDataStartTime = r.json.dataRange.start / 1000
                    m.lastDataEndTime = r.json.dataRange.end / 1000
                end if
                return m.metadataParser.parseMetadata(r.json)
            end if
        end if
        return invalid
    end function

    private function findPodById(pods as object, podId as string)
        for each pod in pods
            if pod.id = podId
                return pod
            end if
        end for
        return invalid
    end function

    sub mergePods(newPods as object)
        ' Deep clone
        current = parseJson(formatJson(m.rafMetadata.adBreaks))
        playhead = m.player.sgNode.position ?? 0
        adOpportunities = 0

        ' Assume pods are in chronological order
        for each pod in current
            if playhead - pod.renderTime < m.POD_RETENTION_SEC
                newPod = m.findPodById(newPods.adBreaks, pod.id)
                if newPod <> invalid
                    ' Old pod. Keep until expired.
                    if newPod.duration <> pod.duration
                        pod.duration = newPod.duration
                    end if
                    m.mergeAds(pod.ads, newPod.ads)
                end if
                adOpportunities += pod.ads.count()
            else
                ' Evict expired pods
                current.shift()
            end if
        end for

        for each newPod in newPods.adBreaks
            podExist = m.findPodById(current, newPod.id)
            if podExist = invalid
                if current.count() = 0
                    current.push(newPod)
                else
                    current = m.podHelper.binaryInsert(current, newPod)
                end if
                adOpportunities += newPod.ads.count()
            end if
        end for

        m.rafMetadata.adOpportunities = adOpportunities
        m.rafMetadata.adBreaks = current
    end sub

    sub mergeAds(oldAds, newAds)
        for each newAd in newAds
            adExist = m.findPodById(oldAds, newAd.id)
            if adExist = invalid
                oldAds.push(newAd)
            else
                if adExist.duration <> newAd.duration
                    adExist.duration = newAd.duration
                end if
            end if
        end for
    end sub

    ' params:
    ' - player: Player params
    '   - sgNode: Video node
    '   - port: Player port
    ' - useStitched: Adapter will fire the events if true. Client needs to handle the callback if false.
    sub enableAds(params as object)
        valid = false
        if type(params["player"]) = "roAssociativeArray"
            player = params["player"]
            if player.doesexist("port") and player.doesexist("sgNode")
                valid = true
            end if
            m.player = player
        end if
        m.useStitched = (invalid = params["useStitched"] or params["useStitched"])
        if m.useStitched
            ' WIP
        end if

        if not valid
            print "Invalid params"
            return
        end if
        m.setRAFAdPods(m.rafMetadata.adBreaks)
    end sub

    function onMessage(msg as object) as object
        msgType = m.getMsgType(msg, m.player)
        if msgType = m.msgType.FINISHED
            m.log("All video is completed - full result")
            m.doCall(m.AdEvent.STREAM_END, {})
        else if msgType = m.msgType.METADATA
            m.onMetadata(msg)
        else if msgType = m.msgType.POSITION
            m.onPosition(msg)
        else if invalid <> msg and msgType = m.msgType.UNKNOWN
            m.onUnknown(msg)
        end if
        curAd = m.msgToRAF(msg)
        return curAd
    end function

    sub addEventListener(event as string, callback as function)
        m.callbacks[event] = callback
    end sub

    private sub onMetadata(msg as object)
        ' WIP
    end sub

    private function getMpdTime() as longinteger
        time = createObject("roLongInteger")
        playheadEpochTime = createObject("roDateTime").AsSeconds()
        if m.player?.sgNode?.positioninfo?.video ?? 0 > 0
            playheadEpochTime = m.player.sgNode.positioninfo.video
        end if
        time.setLongInt(playheadEpochTime - (m.metadataParser?.availabilityStartTime ?? 0))
        return time
    end function

    private function timeInRange() as boolean
        ' Convert current time to mpd time
        ' For HLS no need to convert (availabilityStartTime = 0 so still obtain epoch time)
        playheadMpdTime = m.getMpdTime()
        return m.lastDataStartTime < playheadMpdTime and playheadMpdTime < (m.lastDataEndTime - m.EARLY_FETCH_SEC)
    end function

    ' Criteria to trigger metadata fetch
    ' - Ads not playing (as mutating the pods will trigger Roku to refire all events), AND
    ' - m.metadataParser.startTime = 0 (first fetch only), OR
    ' - m.PING_INTERVAL_SEC passed since last fetch, OR
    ' - Scrubbed (metadata outdated)
    private sub onPosition(msg as object)
        forcePing = false
        if m.metadataParser.startTime = 0 and m.player.sgNode.positioninfo.video > 0 and m.player.sgNode.position > 0
            m.metadataParser.startTime.setLongInt(m.player.sgNode.positioninfo.video - m.player.sgNode.position)
            forcePing = true
        else if not m.timeInRange()
            forcePing = true
        end if
        currentTime = createObject("roDateTime").AsSeconds()
        if (forcePing or (currentTime - m.lastPingTime > m.PING_INTERVAL_SEC)) and not m.adsInProgress
            newAds = m.requestMetadata()
            ' Ads are invalid if playhead is outside time range
            if newAds <> invalid
                m.mergePods(newAds)
                m.setRAFAdPods(m.rafMetadata.adBreaks)
                m.lastPingTime = currentTime
            end if
        end if
    end sub

    private sub onUnknown(msg as object)
    end sub

    private function msgToRAF(msg as object)
        if m.useStitched
            ads = m.roku_ads.stitchedAdHandledEvent(msg, m.player)
            m.adsInProgress = ads <> invalid
            m.doCall(m.AdEvent.PODS, { event: m.AdEvent.PODS, adPods: m.rafMetadata.adBreaks })
            return ads
        end if
        return invalid
    end function

    private sub doCall(event as string, adInfo as object)
        if m.callbacks[event] <> invalid
            func = m.funcCall
            func(m.callbacks[event], adInfo)
        end if
    end sub

    private sub funcCall(dd as function, ue as object) as void
        dd(ue)
    end sub

    private function getMsgType(msg as object, player as object) as integer
        nodeId = player.sgNode.id
        if "roSGNodeEvent" = type(msg)
            xg = msg.getField()
            if nodeId = msg.getNode()
                if xg = "position"
                    return m.msgType.POSITION
                else if xg.left(13) = "timedMetaData"
                    return m.msgType.METADATA
                else if xg = "state"
                    if msg.getData() = "finished"
                        return m.msgType.FINISHED
                    end if
                end if
            else
                if xg = "keypressed"
                    return m.msgType.KEYEVENT
                end if
            end if
        end if
        return m.msgType.UNKNOWN
    end function

    private sub setRAFAdPods(adBreaks as object)
        if adBreaks <> invalid and 0 < adBreaks.count()
            if m.useStitched
                m.roku_ads.stitchedAdsInit(adBreaks)
                m.log("setRAFAdPods() adBreaks set to RAF.")
            end if
            m.doCall(m.AdEvent.PODS, { event: m.AdEvent.PODS, adPods: adBreaks })
        end if
    end sub

    private sub log(x, logLevel = -1 as integer)
        if logLevel < m.logLevel
            ddttm = createObject("roDateTime")
            dtm = ["Harmonic_RAFX_SSAI (", ddttm.toISOString().split("T")[1], " ", ddttm.getMilliseconds().tostr(), "): "].join("")
            if "roArray" = type(x)
                print dtm; x.join("")
            else
                print dtm; x
            end if
        end if
    end sub

end class
